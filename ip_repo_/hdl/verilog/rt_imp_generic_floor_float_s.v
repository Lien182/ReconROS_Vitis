// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rt_imp_generic_floor_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [4:0] mask_table_address0;
reg    mask_table_ce0;
wire   [22:0] mask_table_q0;
reg   [31:0] x_read_reg_296;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] data_V_fu_67_p1;
reg   [31:0] data_V_reg_301;
reg   [0:0] p_Result_s_reg_306;
wire   [7:0] tmp_fu_79_p4;
reg   [7:0] tmp_reg_315;
wire   [30:0] trunc_ln368_fu_132_p1;
reg   [30:0] trunc_ln368_reg_327;
wire   [0:0] icmp_ln19_fu_136_p2;
reg   [0:0] icmp_ln19_reg_332;
wire   [63:0] zext_ln541_fu_127_p1;
wire    ap_block_pp0_stage0;
wire   [7:0] trunc_ln19_fu_89_p1;
wire   [14:0] tmp_s_fu_99_p4;
wire   [7:0] or_ln19_fu_93_p2;
wire   [4:0] index_fu_117_p4;
wire   [22:0] tmp_12_fu_109_p3;
wire   [31:0] p_Result_43_fu_163_p3;
wire   [31:0] trunc_ln39_cast_fu_159_p1;
wire   [31:0] data_V_8_fu_170_p2;
wire   [0:0] p_Result_44_fu_176_p3;
wire   [7:0] tmp_37_fu_184_p4;
wire   [22:0] trunc_ln803_fu_205_p1;
wire   [22:0] trunc_ln803_1_fu_209_p1;
wire   [22:0] xs_sig_V_4_fu_212_p3;
wire   [22:0] xor_ln1496_fu_219_p2;
wire   [0:0] xs_sign_V_fu_194_p2;
wire   [7:0] xs_exp_V_fu_199_p3;
wire   [22:0] xs_sig_V_fu_225_p2;
wire   [0:0] icmp_ln1034_fu_142_p2;
wire   [0:0] icmp_ln1034_2_fu_147_p2;
wire   [0:0] or_ln1034_fu_241_p2;
wire   [31:0] p_Result_42_fu_152_p3;
wire   [31:0] p_Result_45_fu_231_p4;
wire   [31:0] select_ln1034_fu_247_p3;
wire   [0:0] and_ln19_fu_259_p2;
wire   [0:0] and_ln19_1_fu_263_p2;
wire   [31:0] bitcast_ln1034_fu_255_p1;
wire   [0:0] xor_ln1034_fu_277_p2;
wire   [0:0] and_ln1034_fu_283_p2;
wire   [31:0] select_ln19_fu_269_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

rt_imp_generic_floor_float_s_mask_table_ROM_AUTO_1R #(
    .DataWidth( 23 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0),
    .q0(mask_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_reg_301 <= data_V_fu_67_p1;
        icmp_ln19_reg_332 <= icmp_ln19_fu_136_p2;
        p_Result_s_reg_306 <= data_V_fu_67_p1[32'd31];
        tmp_reg_315 <= {{data_V_fu_67_p1[30:23]}};
        trunc_ln368_reg_327 <= trunc_ln368_fu_132_p1;
        x_read_reg_296 <= x;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mask_table_ce0 = 1'b1;
    end else begin
        mask_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1034_fu_283_p2 = (xor_ln1034_fu_277_p2 & icmp_ln1034_2_fu_147_p2);

assign and_ln19_1_fu_263_p2 = (icmp_ln1034_fu_142_p2 & and_ln19_fu_259_p2);

assign and_ln19_fu_259_p2 = (p_Result_s_reg_306 & icmp_ln19_reg_332);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((and_ln1034_fu_283_p2[0:0] == 1'b1) ? x_read_reg_296 : select_ln19_fu_269_p3);

assign bitcast_ln1034_fu_255_p1 = select_ln1034_fu_247_p3;

assign data_V_8_fu_170_p2 = (p_Result_43_fu_163_p3 + trunc_ln39_cast_fu_159_p1);

assign data_V_fu_67_p1 = x;

assign icmp_ln1034_2_fu_147_p2 = ((tmp_reg_315 > 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln1034_fu_142_p2 = ((tmp_reg_315 < 8'd127) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_136_p2 = ((tmp_12_fu_109_p3 != 23'd0) ? 1'b1 : 1'b0);

assign index_fu_117_p4 = {{data_V_fu_67_p1[27:23]}};

assign mask_table_address0 = zext_ln541_fu_127_p1;

assign or_ln1034_fu_241_p2 = (icmp_ln1034_fu_142_p2 | icmp_ln1034_2_fu_147_p2);

assign or_ln19_fu_93_p2 = (trunc_ln19_fu_89_p1 | tmp_fu_79_p4);

assign p_Result_42_fu_152_p3 = {{p_Result_s_reg_306}, {31'd0}};

assign p_Result_43_fu_163_p3 = {{1'd1}, {trunc_ln368_reg_327}};

assign p_Result_44_fu_176_p3 = data_V_8_fu_170_p2[32'd31];

assign p_Result_45_fu_231_p4 = {{{xs_sign_V_fu_194_p2}, {xs_exp_V_fu_199_p3}}, {xs_sig_V_fu_225_p2}};

assign select_ln1034_fu_247_p3 = ((or_ln1034_fu_241_p2[0:0] == 1'b1) ? p_Result_42_fu_152_p3 : p_Result_45_fu_231_p4);

assign select_ln19_fu_269_p3 = ((and_ln19_1_fu_263_p2[0:0] == 1'b1) ? 32'd3212836864 : bitcast_ln1034_fu_255_p1);

assign tmp_12_fu_109_p3 = {{tmp_s_fu_99_p4}, {or_ln19_fu_93_p2}};

assign tmp_37_fu_184_p4 = {{data_V_8_fu_170_p2[30:23]}};

assign tmp_fu_79_p4 = {{data_V_fu_67_p1[30:23]}};

assign tmp_s_fu_99_p4 = {{data_V_fu_67_p1[22:8]}};

assign trunc_ln19_fu_89_p1 = data_V_fu_67_p1[7:0];

assign trunc_ln368_fu_132_p1 = data_V_fu_67_p1[30:0];

assign trunc_ln39_cast_fu_159_p1 = mask_table_q0;

assign trunc_ln803_1_fu_209_p1 = data_V_reg_301[22:0];

assign trunc_ln803_fu_205_p1 = data_V_8_fu_170_p2[22:0];

assign xor_ln1034_fu_277_p2 = (icmp_ln1034_fu_142_p2 ^ 1'd1);

assign xor_ln1496_fu_219_p2 = (mask_table_q0 ^ 23'd8388607);

assign xs_exp_V_fu_199_p3 = ((p_Result_s_reg_306[0:0] == 1'b1) ? tmp_37_fu_184_p4 : tmp_reg_315);

assign xs_sig_V_4_fu_212_p3 = ((p_Result_s_reg_306[0:0] == 1'b1) ? trunc_ln803_fu_205_p1 : trunc_ln803_1_fu_209_p1);

assign xs_sig_V_fu_225_p2 = (xs_sig_V_4_fu_212_p3 & xor_ln1496_fu_219_p2);

assign xs_sign_V_fu_194_p2 = (p_Result_s_reg_306 & p_Result_44_fu_176_p3);

assign zext_ln541_fu_127_p1 = index_fu_117_p4;

endmodule //rt_imp_generic_floor_float_s
