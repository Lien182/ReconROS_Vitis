// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rt_imp_warpTransform_100_50_0_true_7_600_1000_1_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        tmp_mat_46_dout,
        tmp_mat_46_empty_n,
        tmp_mat_46_read,
        out_mat_47_din,
        out_mat_47_full_n,
        out_mat_47_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] tmp_mat_46_dout;
input   tmp_mat_46_empty_n;
output   tmp_mat_46_read;
output  [31:0] out_mat_47_din;
input   out_mat_47_full_n;
output   out_mat_47_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg tmp_mat_46_read;
reg out_mat_47_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire    grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_tmp_mat_46_read;
wire   [31:0] grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_out_mat_47_din;
wire    grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_out_mat_47_write;
wire    grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start;
wire    grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done;
wire    grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready;
wire    grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_idle;
reg    grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_continue;
reg    grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start_reg;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready;
wire    ap_sync_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready;
reg    ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready = 1'b0;
#0 ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done = 1'b0;
end

rt_imp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22(
    .tmp_mat_46_dout(tmp_mat_46_dout),
    .tmp_mat_46_empty_n(tmp_mat_46_empty_n),
    .tmp_mat_46_read(grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_tmp_mat_46_read),
    .out_mat_47_din(grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_out_mat_47_din),
    .out_mat_47_full_n(out_mat_47_full_n),
    .out_mat_47_write(grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_out_mat_47_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start),
    .ap_done(grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done),
    .ap_ready(grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready),
    .ap_idle(grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_idle),
    .ap_continue(grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done <= 1'b0;
        end else if ((grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done == 1'b1)) begin
            ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready <= 1'b0;
        end else if ((grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start_reg <= 1'b1;
        end else if ((grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready == 1'b1)) begin
            grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_continue = 1'b1;
    end else begin
        grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_mat_47_write = grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_out_mat_47_write;
    end else begin
        out_mat_47_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_mat_46_read = grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_tmp_mat_46_read;
    end else begin
        tmp_mat_46_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready & ap_sync_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done) == 1'b0);
end

assign ap_ready = internal_ap_ready;

assign ap_sync_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done = (grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done | ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_done);

assign ap_sync_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready = (grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready | ap_sync_reg_grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_ready);

assign grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start = grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_ap_start_reg;

assign out_mat_47_din = grp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_s_fu_22_out_mat_47_din;

assign start_out = real_start;

endmodule //rt_imp_warpTransform_100_50_0_true_7_600_1000_1_false_s
