// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rt_imp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_Loop_COPY_MAT1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_idle;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1072_fu_128_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] transform_matrix_address0;
reg    transform_matrix_ce0;
wire   [31:0] transform_matrix_q0;
wire   [1:0] select_ln521_fu_149_p3;
reg   [1:0] select_ln521_reg_377;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln1072_fu_189_p3;
reg   [1:0] select_ln1072_reg_381;
wire   [63:0] zext_ln587_fu_207_p1;
wire    ap_block_pp0_stage0;
reg   [1:0] rhs_V_fu_40;
wire   [1:0] add_ln885_1_fu_212_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_rhs_V_load;
reg   [1:0] i_V_fu_44;
reg   [1:0] ap_sig_allocacmp_i_V_4;
reg   [3:0] indvar_flatten_fu_48;
wire   [3:0] add_ln1072_fu_134_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] R_1_fu_52;
reg   [31:0] ap_sig_allocacmp_R_1_load;
reg   [31:0] R_2_fu_56;
reg   [31:0] ap_sig_allocacmp_R_2_load;
reg   [31:0] R_3_fu_60;
reg   [31:0] ap_sig_allocacmp_R_3_load;
reg   [31:0] R_4_fu_64;
reg   [31:0] ap_sig_allocacmp_R_4_load;
reg   [31:0] R_5_fu_68;
reg   [31:0] ap_sig_allocacmp_R_5_load;
reg   [31:0] R_6_fu_72;
reg   [31:0] ap_sig_allocacmp_R_6_load;
wire   [3:0] p_shl_fu_114_p3;
wire   [3:0] i_V_cast_fu_110_p1;
wire   [0:0] icmp_ln1072_1_fu_143_p2;
wire   [1:0] add_ln885_fu_157_p2;
wire   [3:0] p_shl_mid1_fu_167_p3;
wire   [3:0] i_V_cast_mid1_fu_163_p1;
wire   [3:0] lhs_V_mid1_fu_175_p2;
wire   [3:0] lhs_V_fu_122_p2;
wire   [3:0] select_ln521_1_fu_181_p3;
wire   [3:0] zext_ln1540_fu_197_p1;
wire   [3:0] ret_V_fu_201_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_92;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
end

rt_imp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_Loop_COPY_MAT1_proc_transfcud #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
transform_matrix_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(transform_matrix_address0),
    .ce0(transform_matrix_ce0),
    .q0(transform_matrix_q0)
);

rt_imp_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_0_preg <= ap_sig_allocacmp_R_6_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_1_preg <= ap_sig_allocacmp_R_5_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_2_preg <= ap_sig_allocacmp_R_4_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_3_preg <= ap_sig_allocacmp_R_3_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_4_preg <= ap_sig_allocacmp_R_2_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_5_preg <= ap_sig_allocacmp_R_1_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_92)) begin
        if ((icmp_ln1072_fu_128_p2 == 1'd0)) begin
            i_V_fu_44 <= select_ln1072_fu_189_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_44 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_92)) begin
        if ((icmp_ln1072_fu_128_p2 == 1'd0)) begin
            indvar_flatten_fu_48 <= add_ln1072_fu_134_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_92)) begin
        if ((icmp_ln1072_fu_128_p2 == 1'd0)) begin
            rhs_V_fu_40 <= add_ln885_1_fu_212_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            rhs_V_fu_40 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1072_reg_381 == 2'd1) & (select_ln521_reg_377 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_1_fu_52 <= transform_matrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1072_reg_381 == 2'd1) & (select_ln521_reg_377 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_2_fu_56 <= transform_matrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln521_reg_377 == 2'd0) & ~(select_ln521_reg_377 == 2'd1) & (select_ln1072_reg_381 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_3_fu_60 <= transform_matrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1072_reg_381 == 2'd0) & (select_ln521_reg_377 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_4_fu_64 <= transform_matrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1072_reg_381 == 2'd0) & (select_ln521_reg_377 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_5_fu_68 <= transform_matrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln521_reg_377 == 2'd0) & ~(select_ln521_reg_377 == 2'd1) & (select_ln1072_reg_381 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_6_fu_72 <= transform_matrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1072_fu_128_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln1072_reg_381 <= select_ln1072_fu_189_p3;
        select_ln521_reg_377 <= select_ln521_fu_149_p3;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_0 = ap_sig_allocacmp_R_6_load;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_1 = ap_sig_allocacmp_R_5_load;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_2 = ap_sig_allocacmp_R_4_load;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_3 = ap_sig_allocacmp_R_3_load;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_4 = ap_sig_allocacmp_R_2_load;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_5 = ap_sig_allocacmp_R_1_load;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((select_ln1072_reg_381 == 2'd1) & (select_ln521_reg_377 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_R_1_load = transform_matrix_q0;
    end else begin
        ap_sig_allocacmp_R_1_load = R_1_fu_52;
    end
end

always @ (*) begin
    if (((select_ln1072_reg_381 == 2'd1) & (select_ln521_reg_377 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_R_2_load = transform_matrix_q0;
    end else begin
        ap_sig_allocacmp_R_2_load = R_2_fu_56;
    end
end

always @ (*) begin
    if ((~(select_ln521_reg_377 == 2'd0) & ~(select_ln521_reg_377 == 2'd1) & (select_ln1072_reg_381 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_R_3_load = transform_matrix_q0;
    end else begin
        ap_sig_allocacmp_R_3_load = R_3_fu_60;
    end
end

always @ (*) begin
    if (((select_ln1072_reg_381 == 2'd0) & (select_ln521_reg_377 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_R_4_load = transform_matrix_q0;
    end else begin
        ap_sig_allocacmp_R_4_load = R_4_fu_64;
    end
end

always @ (*) begin
    if (((select_ln1072_reg_381 == 2'd0) & (select_ln521_reg_377 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_R_5_load = transform_matrix_q0;
    end else begin
        ap_sig_allocacmp_R_5_load = R_5_fu_68;
    end
end

always @ (*) begin
    if ((~(select_ln521_reg_377 == 2'd0) & ~(select_ln521_reg_377 == 2'd1) & (select_ln1072_reg_381 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_R_6_load = transform_matrix_q0;
    end else begin
        ap_sig_allocacmp_R_6_load = R_6_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_4 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_V_4 = i_V_fu_44;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_48;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_rhs_V_load = 2'd0;
    end else begin
        ap_sig_allocacmp_rhs_V_load = rhs_V_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transform_matrix_ce0 = 1'b1;
    end else begin
        transform_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1072_fu_134_p2 = (ap_sig_allocacmp_indvar_flatten_load + 4'd1);

assign add_ln885_1_fu_212_p2 = (select_ln521_fu_149_p3 + 2'd1);

assign add_ln885_fu_157_p2 = (ap_sig_allocacmp_i_V_4 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_92 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_V_cast_fu_110_p1 = ap_sig_allocacmp_i_V_4;

assign i_V_cast_mid1_fu_163_p1 = add_ln885_fu_157_p2;

assign icmp_ln1072_1_fu_143_p2 = ((ap_sig_allocacmp_rhs_V_load == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1072_fu_128_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 4'd9) ? 1'b1 : 1'b0);

assign lhs_V_fu_122_p2 = (p_shl_fu_114_p3 - i_V_cast_fu_110_p1);

assign lhs_V_mid1_fu_175_p2 = (p_shl_mid1_fu_167_p3 - i_V_cast_mid1_fu_163_p1);

assign p_shl_fu_114_p3 = {{ap_sig_allocacmp_i_V_4}, {2'd0}};

assign p_shl_mid1_fu_167_p3 = {{add_ln885_fu_157_p2}, {2'd0}};

assign ret_V_fu_201_p2 = (select_ln521_1_fu_181_p3 + zext_ln1540_fu_197_p1);

assign select_ln1072_fu_189_p3 = ((icmp_ln1072_1_fu_143_p2[0:0] == 1'b1) ? add_ln885_fu_157_p2 : ap_sig_allocacmp_i_V_4);

assign select_ln521_1_fu_181_p3 = ((icmp_ln1072_1_fu_143_p2[0:0] == 1'b1) ? lhs_V_mid1_fu_175_p2 : lhs_V_fu_122_p2);

assign select_ln521_fu_149_p3 = ((icmp_ln1072_1_fu_143_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_rhs_V_load);

assign transform_matrix_address0 = zext_ln587_fu_207_p1;

assign zext_ln1540_fu_197_p1 = select_ln521_fu_149_p3;

assign zext_ln587_fu_207_p1 = ret_V_fu_201_p2;

endmodule //rt_imp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_Loop_COPY_MAT1_proc
