// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rt_imp_proc_Loop_loop_write_proc8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_mat_data_dout,
        out_mat_data_empty_n,
        out_mat_data_read,
        ram_out_address0,
        ram_out_ce0,
        ram_out_we0,
        ram_out_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] out_mat_data_dout;
input   out_mat_data_empty_n;
output   out_mat_data_read;
output  [16:0] ram_out_address0;
output   ram_out_ce0;
output   ram_out_we0;
output  [63:0] ram_out_d0;

reg ap_idle;
reg out_mat_data_read;
reg[16:0] ram_out_address0;
reg ram_out_ce0;
reg ram_out_we0;
reg[63:0] ram_out_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln145_fu_150_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage7;
reg   [0:0] icmp_ln145_reg_308;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_subdone;
reg    out_mat_data_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage0;
wire   [7:0] grp_fu_101_p4;
reg   [7:0] reg_121;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_pp0_stage7_11001;
wire   [7:0] grp_fu_111_p4;
reg   [7:0] reg_125;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [7:0] reg_129;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [7:0] reg_133;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln674_fu_167_p1;
reg   [7:0] trunc_ln674_reg_312;
wire   [7:0] trunc_ln674_4_fu_171_p1;
reg   [7:0] trunc_ln674_4_reg_317;
reg   [16:0] ramptr_load_reg_322;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [7:0] trunc_ln674_5_fu_202_p1;
reg   [7:0] trunc_ln674_5_reg_328;
wire   [7:0] trunc_ln674_6_fu_217_p1;
reg   [7:0] trunc_ln674_6_reg_333;
wire   [7:0] trunc_ln674_7_fu_221_p1;
reg   [7:0] trunc_ln674_7_reg_338;
wire   [7:0] trunc_ln674_8_fu_253_p1;
reg   [7:0] trunc_ln674_8_reg_343;
wire   [7:0] trunc_ln674_9_fu_257_p1;
reg   [7:0] trunc_ln674_9_reg_348;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] ramptr_cast_fu_178_p1;
wire   [63:0] zext_ln178_fu_248_p1;
wire   [63:0] zext_ln191_fu_289_p1;
reg   [15:0] i_fu_58;
wire   [15:0] i_4_fu_156_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_i_3;
reg   [16:0] ramptr_fu_62;
wire   [16:0] add_ln191_fu_206_p2;
reg   [16:0] ap_sig_allocacmp_ramptr_load;
wire   [63:0] p_Result_s_115_fu_183_p9;
wire   [63:0] p_Result_33_fu_225_p9;
wire   [63:0] p_Result_34_fu_265_p9;
wire   [16:0] add_ln178_fu_243_p2;
wire   [7:0] trunc_ln674_10_fu_261_p1;
wire   [16:0] add_ln191_1_fu_284_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_274;
reg    ap_condition_287;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

rt_imp_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_274)) begin
        if ((icmp_ln145_fu_150_p2 == 1'd0)) begin
            i_fu_58 <= i_4_fu_156_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_287)) begin
        if ((icmp_ln145_reg_308 == 1'd0)) begin
            ramptr_fu_62 <= add_ln191_fu_206_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ramptr_fu_62 <= 17'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln145_reg_308 <= icmp_ln145_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ramptr_load_reg_322 <= ap_sig_allocacmp_ramptr_load;
        trunc_ln674_5_reg_328 <= trunc_ln674_5_fu_202_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_121 <= {{out_mat_data_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_125 <= {{out_mat_data_dout[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_129 <= {{out_mat_data_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        reg_133 <= {{out_mat_data_dout[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        trunc_ln674_4_reg_317 <= trunc_ln674_4_fu_171_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        trunc_ln674_6_reg_333 <= trunc_ln674_6_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        trunc_ln674_7_reg_338 <= trunc_ln674_7_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        trunc_ln674_8_reg_343 <= trunc_ln674_8_fu_253_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        trunc_ln674_9_reg_348 <= trunc_ln674_9_fu_257_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln674_reg_312 <= trunc_ln674_fu_167_p1;
    end
end

always @ (*) begin
    if (((icmp_ln145_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 16'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_sig_allocacmp_ramptr_load = 17'd0;
    end else begin
        ap_sig_allocacmp_ramptr_load = ramptr_fu_62;
    end
end

always @ (*) begin
    if ((((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_mat_data_blk_n = out_mat_data_empty_n;
    end else begin
        out_mat_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_mat_data_read = 1'b1;
    end else begin
        out_mat_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ram_out_address0 = zext_ln191_fu_289_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ram_out_address0 = zext_ln178_fu_248_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ram_out_address0 = ramptr_cast_fu_178_p1;
    end else begin
        ram_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        ram_out_ce0 = 1'b1;
    end else begin
        ram_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ram_out_d0 = p_Result_34_fu_265_p9;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ram_out_d0 = p_Result_33_fu_225_p9;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ram_out_d0 = p_Result_s_115_fu_183_p9;
    end else begin
        ram_out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln145_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ram_out_we0 = 1'b1;
    end else begin
        ram_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln178_fu_243_p2 = (ramptr_load_reg_322 + 17'd1);

assign add_ln191_1_fu_284_p2 = (ramptr_load_reg_322 + 17'd2);

assign add_ln191_fu_206_p2 = (ap_sig_allocacmp_ramptr_load + 17'd3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = ((icmp_ln145_reg_308 == 1'd0) & (out_mat_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = (out_mat_data_empty_n == 1'b0);
end

always @ (*) begin
    ap_condition_274 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_287 = ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_101_p4 = {{out_mat_data_dout[23:16]}};

assign grp_fu_111_p4 = {{out_mat_data_dout[15:8]}};

assign i_4_fu_156_p2 = (ap_sig_allocacmp_i_3 + 16'd1);

assign icmp_ln145_fu_150_p2 = ((ap_sig_allocacmp_i_3 == 16'd38400) ? 1'b1 : 1'b0);

assign p_Result_33_fu_225_p9 = {{{{{{{{grp_fu_101_p4}, {trunc_ln674_7_reg_338}}, {reg_133}}, {reg_129}}, {trunc_ln674_6_reg_333}}, {reg_125}}, {reg_121}}, {trunc_ln674_5_reg_328}};

assign p_Result_34_fu_265_p9 = {{{{{{{{trunc_ln674_10_fu_261_p1}, {grp_fu_111_p4}}, {grp_fu_101_p4}}, {trunc_ln674_9_reg_348}}, {reg_133}}, {reg_121}}, {trunc_ln674_8_reg_343}}, {reg_125}};

assign p_Result_s_115_fu_183_p9 = {{{{{{{{grp_fu_111_p4}, {grp_fu_101_p4}}, {trunc_ln674_4_reg_317}}, {reg_133}}, {reg_129}}, {trunc_ln674_reg_312}}, {reg_125}}, {reg_121}};

assign ramptr_cast_fu_178_p1 = ap_sig_allocacmp_ramptr_load;

assign trunc_ln674_10_fu_261_p1 = out_mat_data_dout[7:0];

assign trunc_ln674_4_fu_171_p1 = out_mat_data_dout[7:0];

assign trunc_ln674_5_fu_202_p1 = out_mat_data_dout[7:0];

assign trunc_ln674_6_fu_217_p1 = out_mat_data_dout[7:0];

assign trunc_ln674_7_fu_221_p1 = out_mat_data_dout[7:0];

assign trunc_ln674_8_fu_253_p1 = out_mat_data_dout[7:0];

assign trunc_ln674_9_fu_257_p1 = out_mat_data_dout[7:0];

assign trunc_ln674_fu_167_p1 = out_mat_data_dout[7:0];

assign zext_ln178_fu_248_p1 = add_ln178_fu_243_p2;

assign zext_ln191_fu_289_p1 = add_ln191_1_fu_284_p2;

endmodule //rt_imp_proc_Loop_loop_write_proc8
