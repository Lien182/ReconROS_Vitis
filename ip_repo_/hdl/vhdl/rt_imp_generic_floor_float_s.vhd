-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rt_imp_generic_floor_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of rt_imp_generic_floor_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal mask_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table_ce0 : STD_LOGIC;
    signal mask_table_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal x_read_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_V_fu_67_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_79_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln368_fu_132_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_reg_327 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln19_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln541_fu_127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln19_fu_89_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_99_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln19_fu_93_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_fu_117_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_109_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_43_fu_163_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_cast_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_8_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_44_fu_176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_184_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln803_fu_205_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln803_1_fu_209_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sig_V_4_fu_212_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln1496_fu_219_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_V_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_fu_199_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sig_V_fu_225_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1034_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1034_2_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1034_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_42_fu_152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_45_fu_231_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1034_fu_247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln19_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_1_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln1034_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1034_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1034_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_269_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rt_imp_generic_floor_float_s_mask_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    mask_table_U : component rt_imp_generic_floor_float_s_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0,
        q0 => mask_table_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_V_reg_301 <= data_V_fu_67_p1;
                icmp_ln19_reg_332 <= icmp_ln19_fu_136_p2;
                p_Result_s_reg_306 <= data_V_fu_67_p1(31 downto 31);
                tmp_reg_315 <= data_V_fu_67_p1(30 downto 23);
                trunc_ln368_reg_327 <= trunc_ln368_fu_132_p1;
                x_read_reg_296 <= x;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln1034_fu_283_p2 <= (xor_ln1034_fu_277_p2 and icmp_ln1034_2_fu_147_p2);
    and_ln19_1_fu_263_p2 <= (icmp_ln1034_fu_142_p2 and and_ln19_fu_259_p2);
    and_ln19_fu_259_p2 <= (p_Result_s_reg_306 and icmp_ln19_reg_332);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        x_read_reg_296 when (and_ln1034_fu_283_p2(0) = '1') else 
        select_ln19_fu_269_p3;
    bitcast_ln1034_fu_255_p1 <= select_ln1034_fu_247_p3;
    data_V_8_fu_170_p2 <= std_logic_vector(unsigned(p_Result_43_fu_163_p3) + unsigned(trunc_ln39_cast_fu_159_p1));
    data_V_fu_67_p1 <= x;
    icmp_ln1034_2_fu_147_p2 <= "1" when (unsigned(tmp_reg_315) > unsigned(ap_const_lv8_96)) else "0";
    icmp_ln1034_fu_142_p2 <= "1" when (unsigned(tmp_reg_315) < unsigned(ap_const_lv8_7F)) else "0";
    icmp_ln19_fu_136_p2 <= "0" when (tmp_12_fu_109_p3 = ap_const_lv23_0) else "1";
    index_fu_117_p4 <= data_V_fu_67_p1(27 downto 23);
    mask_table_address0 <= zext_ln541_fu_127_p1(5 - 1 downto 0);

    mask_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mask_table_ce0 <= ap_const_logic_1;
        else 
            mask_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1034_fu_241_p2 <= (icmp_ln1034_fu_142_p2 or icmp_ln1034_2_fu_147_p2);
    or_ln19_fu_93_p2 <= (trunc_ln19_fu_89_p1 or tmp_fu_79_p4);
    p_Result_42_fu_152_p3 <= (p_Result_s_reg_306 & ap_const_lv31_0);
    p_Result_43_fu_163_p3 <= (ap_const_lv1_1 & trunc_ln368_reg_327);
    p_Result_44_fu_176_p3 <= data_V_8_fu_170_p2(31 downto 31);
    p_Result_45_fu_231_p4 <= ((xs_sign_V_fu_194_p2 & xs_exp_V_fu_199_p3) & xs_sig_V_fu_225_p2);
    select_ln1034_fu_247_p3 <= 
        p_Result_42_fu_152_p3 when (or_ln1034_fu_241_p2(0) = '1') else 
        p_Result_45_fu_231_p4;
    select_ln19_fu_269_p3 <= 
        ap_const_lv32_BF800000 when (and_ln19_1_fu_263_p2(0) = '1') else 
        bitcast_ln1034_fu_255_p1;
    tmp_12_fu_109_p3 <= (tmp_s_fu_99_p4 & or_ln19_fu_93_p2);
    tmp_37_fu_184_p4 <= data_V_8_fu_170_p2(30 downto 23);
    tmp_fu_79_p4 <= data_V_fu_67_p1(30 downto 23);
    tmp_s_fu_99_p4 <= data_V_fu_67_p1(22 downto 8);
    trunc_ln19_fu_89_p1 <= data_V_fu_67_p1(8 - 1 downto 0);
    trunc_ln368_fu_132_p1 <= data_V_fu_67_p1(31 - 1 downto 0);
    trunc_ln39_cast_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table_q0),32));
    trunc_ln803_1_fu_209_p1 <= data_V_reg_301(23 - 1 downto 0);
    trunc_ln803_fu_205_p1 <= data_V_8_fu_170_p2(23 - 1 downto 0);
    xor_ln1034_fu_277_p2 <= (icmp_ln1034_fu_142_p2 xor ap_const_lv1_1);
    xor_ln1496_fu_219_p2 <= (mask_table_q0 xor ap_const_lv23_7FFFFF);
    xs_exp_V_fu_199_p3 <= 
        tmp_37_fu_184_p4 when (p_Result_s_reg_306(0) = '1') else 
        tmp_reg_315;
    xs_sig_V_4_fu_212_p3 <= 
        trunc_ln803_fu_205_p1 when (p_Result_s_reg_306(0) = '1') else 
        trunc_ln803_1_fu_209_p1;
    xs_sig_V_fu_225_p2 <= (xs_sig_V_4_fu_212_p3 and xor_ln1496_fu_219_p2);
    xs_sign_V_fu_194_p2 <= (p_Result_s_reg_306 and p_Result_44_fu_176_p3);
    zext_ln541_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_117_p4),64));
end behav;
