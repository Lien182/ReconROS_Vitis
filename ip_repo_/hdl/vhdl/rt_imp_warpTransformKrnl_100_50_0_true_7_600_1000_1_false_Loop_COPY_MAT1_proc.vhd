-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rt_imp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_Loop_COPY_MAT1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of rt_imp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_Loop_COPY_MAT1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1072_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal transform_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal transform_matrix_ce0 : STD_LOGIC;
    signal transform_matrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln521_fu_149_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln521_reg_377 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln1072_fu_189_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1072_reg_381 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln587_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal rhs_V_fu_40 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln885_1_fu_212_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_rhs_V_load : STD_LOGIC_VECTOR (1 downto 0);
    signal i_V_fu_44 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_V_4 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_48 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1072_fu_134_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (3 downto 0);
    signal R_1_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_R_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal R_2_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_R_2_load : STD_LOGIC_VECTOR (31 downto 0);
    signal R_3_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_R_3_load : STD_LOGIC_VECTOR (31 downto 0);
    signal R_4_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_R_4_load : STD_LOGIC_VECTOR (31 downto 0);
    signal R_5_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_R_5_load : STD_LOGIC_VECTOR (31 downto 0);
    signal R_6_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_R_6_load : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_114_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_cast_fu_110_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1072_1_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln885_fu_157_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_mid1_fu_167_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_cast_mid1_fu_163_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_mid1_fu_175_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_fu_122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln521_1_fu_181_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1540_fu_197_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_201_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_92 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component rt_imp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_Loop_COPY_MAT1_proc_transfcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rt_imp_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    transform_matrix_U : component rt_imp_warpTransformKrnl_100_50_0_true_7_600_1000_1_false_Loop_COPY_MAT1_proc_transfcud
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => transform_matrix_address0,
        ce0 => transform_matrix_ce0,
        q0 => transform_matrix_q0);

    flow_control_loop_pipe_U : component rt_imp_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_0_preg <= ap_sig_allocacmp_R_6_load;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_1_preg <= ap_sig_allocacmp_R_5_load;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_2_preg <= ap_sig_allocacmp_R_4_load;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_3_preg <= ap_sig_allocacmp_R_3_load;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_4_preg <= ap_sig_allocacmp_R_2_load;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_5_preg <= ap_sig_allocacmp_R_1_load;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_92)) then
                if ((icmp_ln1072_fu_128_p2 = ap_const_lv1_0)) then 
                    i_V_fu_44 <= select_ln1072_fu_189_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_fu_44 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_92)) then
                if ((icmp_ln1072_fu_128_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_48 <= add_ln1072_fu_134_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_48 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    rhs_V_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_92)) then
                if ((icmp_ln1072_fu_128_p2 = ap_const_lv1_0)) then 
                    rhs_V_fu_40 <= add_ln885_1_fu_212_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    rhs_V_fu_40 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1072_reg_381 = ap_const_lv2_1) and (select_ln521_reg_377 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                R_1_fu_52 <= transform_matrix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1072_reg_381 = ap_const_lv2_1) and (select_ln521_reg_377 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                R_2_fu_56 <= transform_matrix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln521_reg_377 = ap_const_lv2_0)) and not((select_ln521_reg_377 = ap_const_lv2_1)) and (select_ln1072_reg_381 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                R_3_fu_60 <= transform_matrix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1072_reg_381 = ap_const_lv2_0) and (select_ln521_reg_377 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                R_4_fu_64 <= transform_matrix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1072_reg_381 = ap_const_lv2_0) and (select_ln521_reg_377 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                R_5_fu_68 <= transform_matrix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln521_reg_377 = ap_const_lv2_0)) and not((select_ln521_reg_377 = ap_const_lv2_1)) and (select_ln1072_reg_381 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                R_6_fu_72 <= transform_matrix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln1072_reg_381 <= select_ln1072_fu_189_p3;
                select_ln521_reg_377 <= select_ln521_fu_149_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1072_fu_134_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv4_1));
    add_ln885_1_fu_212_p2 <= std_logic_vector(unsigned(select_ln521_fu_149_p3) + unsigned(ap_const_lv2_1));
    add_ln885_fu_157_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_V_4) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_92_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_92 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln1072_fu_128_p2, ap_start_int)
    begin
        if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_128_p2, ap_block_pp0_stage0_11001, ap_sig_allocacmp_R_6_load, ap_return_0_preg)
    begin
        if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_0 <= ap_sig_allocacmp_R_6_load;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_128_p2, ap_block_pp0_stage0_11001, ap_sig_allocacmp_R_5_load, ap_return_1_preg)
    begin
        if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_1 <= ap_sig_allocacmp_R_5_load;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_128_p2, ap_block_pp0_stage0_11001, ap_sig_allocacmp_R_4_load, ap_return_2_preg)
    begin
        if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_2 <= ap_sig_allocacmp_R_4_load;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_128_p2, ap_block_pp0_stage0_11001, ap_sig_allocacmp_R_3_load, ap_return_3_preg)
    begin
        if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_3 <= ap_sig_allocacmp_R_3_load;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_128_p2, ap_block_pp0_stage0_11001, ap_sig_allocacmp_R_2_load, ap_return_4_preg)
    begin
        if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_4 <= ap_sig_allocacmp_R_2_load;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_128_p2, ap_block_pp0_stage0_11001, ap_sig_allocacmp_R_1_load, ap_return_5_preg)
    begin
        if (((icmp_ln1072_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_5 <= ap_sig_allocacmp_R_1_load;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_sig_allocacmp_R_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, transform_matrix_q0, select_ln521_reg_377, select_ln1072_reg_381, ap_block_pp0_stage0, R_1_fu_52)
    begin
        if (((select_ln1072_reg_381 = ap_const_lv2_1) and (select_ln521_reg_377 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_R_1_load <= transform_matrix_q0;
        else 
            ap_sig_allocacmp_R_1_load <= R_1_fu_52;
        end if; 
    end process;


    ap_sig_allocacmp_R_2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, transform_matrix_q0, select_ln521_reg_377, select_ln1072_reg_381, ap_block_pp0_stage0, R_2_fu_56)
    begin
        if (((select_ln1072_reg_381 = ap_const_lv2_1) and (select_ln521_reg_377 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_R_2_load <= transform_matrix_q0;
        else 
            ap_sig_allocacmp_R_2_load <= R_2_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_R_3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, transform_matrix_q0, select_ln521_reg_377, select_ln1072_reg_381, ap_block_pp0_stage0, R_3_fu_60)
    begin
        if ((not((select_ln521_reg_377 = ap_const_lv2_0)) and not((select_ln521_reg_377 = ap_const_lv2_1)) and (select_ln1072_reg_381 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_R_3_load <= transform_matrix_q0;
        else 
            ap_sig_allocacmp_R_3_load <= R_3_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_R_4_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, transform_matrix_q0, select_ln521_reg_377, select_ln1072_reg_381, ap_block_pp0_stage0, R_4_fu_64)
    begin
        if (((select_ln1072_reg_381 = ap_const_lv2_0) and (select_ln521_reg_377 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_R_4_load <= transform_matrix_q0;
        else 
            ap_sig_allocacmp_R_4_load <= R_4_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_R_5_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, transform_matrix_q0, select_ln521_reg_377, select_ln1072_reg_381, ap_block_pp0_stage0, R_5_fu_68)
    begin
        if (((select_ln1072_reg_381 = ap_const_lv2_0) and (select_ln521_reg_377 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_R_5_load <= transform_matrix_q0;
        else 
            ap_sig_allocacmp_R_5_load <= R_5_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_R_6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, transform_matrix_q0, select_ln521_reg_377, select_ln1072_reg_381, ap_block_pp0_stage0, R_6_fu_72)
    begin
        if ((not((select_ln521_reg_377 = ap_const_lv2_0)) and not((select_ln521_reg_377 = ap_const_lv2_1)) and (select_ln1072_reg_381 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_R_6_load <= transform_matrix_q0;
        else 
            ap_sig_allocacmp_R_6_load <= R_6_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_V_fu_44, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_V_4 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_V_4 <= i_V_fu_44;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_48, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_48;
        end if; 
    end process;


    ap_sig_allocacmp_rhs_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, rhs_V_fu_40, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_rhs_V_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_rhs_V_load <= rhs_V_fu_40;
        end if; 
    end process;

    i_V_cast_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_V_4),4));
    i_V_cast_mid1_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln885_fu_157_p2),4));
    icmp_ln1072_1_fu_143_p2 <= "1" when (ap_sig_allocacmp_rhs_V_load = ap_const_lv2_3) else "0";
    icmp_ln1072_fu_128_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv4_9) else "0";
    lhs_V_fu_122_p2 <= std_logic_vector(unsigned(p_shl_fu_114_p3) - unsigned(i_V_cast_fu_110_p1));
    lhs_V_mid1_fu_175_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_167_p3) - unsigned(i_V_cast_mid1_fu_163_p1));
    p_shl_fu_114_p3 <= (ap_sig_allocacmp_i_V_4 & ap_const_lv2_0);
    p_shl_mid1_fu_167_p3 <= (add_ln885_fu_157_p2 & ap_const_lv2_0);
    ret_V_fu_201_p2 <= std_logic_vector(unsigned(select_ln521_1_fu_181_p3) + unsigned(zext_ln1540_fu_197_p1));
    select_ln1072_fu_189_p3 <= 
        add_ln885_fu_157_p2 when (icmp_ln1072_1_fu_143_p2(0) = '1') else 
        ap_sig_allocacmp_i_V_4;
    select_ln521_1_fu_181_p3 <= 
        lhs_V_mid1_fu_175_p2 when (icmp_ln1072_1_fu_143_p2(0) = '1') else 
        lhs_V_fu_122_p2;
    select_ln521_fu_149_p3 <= 
        ap_const_lv2_0 when (icmp_ln1072_1_fu_143_p2(0) = '1') else 
        ap_sig_allocacmp_rhs_V_load;
    transform_matrix_address0 <= zext_ln587_fu_207_p1(4 - 1 downto 0);

    transform_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            transform_matrix_ce0 <= ap_const_logic_1;
        else 
            transform_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1540_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln521_fu_149_p3),4));
    zext_ln587_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_201_p2),64));
end behav;
